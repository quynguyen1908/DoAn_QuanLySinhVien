/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package view;
import dao.DangKiMonDAO;
import dao.LopTinChiDAO;
import dao.SinhVienDAO;
import dao.tinhTrangDangKiDAO;
import java.awt.Component;
import java.sql.SQLException;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.ListCellRenderer;
import javax.swing.table.DefaultTableModel;
import model.DangKiMon;
import model.LopTinChi;
import model.tinhTrangDangKi;

/**
 *
 * @author acer
 */
public class DangKiJPanel extends javax.swing.JPanel {
    tinhTrangDangKiDAO ttdkDAO = new tinhTrangDangKiDAO();
    tinhTrangDangKi tt = new tinhTrangDangKi();
    DefaultTableModel tableModel = new DefaultTableModel();
    DefaultTableModel tableModelLTC = new DefaultTableModel();
    /**
     * Creates new form DangKiJPanel
     */
    public DangKiJPanel() {
        initComponents();
       tt = ttdkDAO.getTinhTrang();
        if (tt.isTrangThai()) {
            jCheckBox1.setSelected(true);
        }
        
        try {
            loadCombobox_MaLopTinChi();
            hienThiDanhSachLopTC();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(DangKiJPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(DangKiJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
   
    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tab_DanhSachLopTinChi = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txt_MaMon = new javax.swing.JTextField();
        btnSua = new javax.swing.JButton();
        txt_Diem = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lblTenSV = new javax.swing.JLabel();
        cbb_MaLopTC = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        txt_NienKhoa = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txt_HocKy = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txt_Nhom = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tab_DanhSachDiem = new javax.swing.JTable(){
            public boolean isCellEditable(int rowIndex, int colIndex) {
                return false;   //Disallow the editing of any cell
            }
        };
        btnHuyLop = new javax.swing.JButton();

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jCheckBox1.setText("Mở đăng kí lớp");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Danh sách lớp tín chỉ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 14))); // NOI18N

        tab_DanhSachLopTinChi.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Mã lớp", "Mã môn", "Niên khóa", "Học kỳ", "Nhóm", "Số lượng SV tối thiểu", "Số lượng SV tối đa"
            }
        ));
        jScrollPane3.setViewportView(tab_DanhSachLopTinChi);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 975, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Nhập điểm sinh viên", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 14))); // NOI18N
        jPanel4.setLayout(null);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel1.setText("Môn học");
        jPanel4.add(jLabel1);
        jLabel1.setBounds(10, 60, 70, 17);

        txt_MaMon.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txt_MaMon.setEnabled(false);
        jPanel4.add(txt_MaMon);
        txt_MaMon.setBounds(90, 60, 100, 30);

        btnSua.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnSua.setText("Nhập điểm");
        btnSua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaActionPerformed(evt);
            }
        });
        jPanel4.add(btnSua);
        btnSua.setBounds(460, 230, 160, 30);

        txt_Diem.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txt_Diem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_DiemActionPerformed(evt);
            }
        });
        jPanel4.add(txt_Diem);
        txt_Diem.setBounds(330, 230, 100, 30);

        jLabel6.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel6.setText("Điểm");
        jPanel4.add(jLabel6);
        jLabel6.setBounds(240, 240, 70, 17);

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel2.setText("Mã lớp TC");
        jPanel4.add(jLabel2);
        jLabel2.setBounds(10, 30, 70, 17);
        jPanel4.add(lblTenSV);
        lblTenSV.setBounds(370, 130, 0, 0);

        cbb_MaLopTC.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        cbb_MaLopTC.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbb_MaLopTCItemStateChanged(evt);
            }
        });
        cbb_MaLopTC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbb_MaLopTCActionPerformed(evt);
            }
        });
        jPanel4.add(cbb_MaLopTC);
        cbb_MaLopTC.setBounds(90, 20, 100, 30);

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel3.setText("Niên khóa");
        jPanel4.add(jLabel3);
        jLabel3.setBounds(10, 140, 120, 17);

        txt_NienKhoa.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txt_NienKhoa.setEnabled(false);
        jPanel4.add(txt_NienKhoa);
        txt_NienKhoa.setBounds(90, 140, 100, 30);

        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel5.setText("Học kỳ");
        jPanel4.add(jLabel5);
        jLabel5.setBounds(10, 100, 120, 17);

        txt_HocKy.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txt_HocKy.setEnabled(false);
        jPanel4.add(txt_HocKy);
        txt_HocKy.setBounds(90, 100, 100, 30);

        jLabel7.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel7.setText("Nhóm");
        jPanel4.add(jLabel7);
        jLabel7.setBounds(10, 180, 120, 17);

        txt_Nhom.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txt_Nhom.setEnabled(false);
        jPanel4.add(txt_Nhom);
        txt_Nhom.setBounds(90, 180, 100, 30);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Danh sách điểm", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 14))); // NOI18N

        tab_DanhSachDiem.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        tab_DanhSachDiem.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Mã lớp TC", "Mã SV", "Tên SV", "Điểm"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tab_DanhSachDiem.getTableHeader().setReorderingAllowed(false);
        tab_DanhSachDiem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tab_DanhSachDiemMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tab_DanhSachDiem);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 744, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 186, Short.MAX_VALUE)
        );

        jPanel4.add(jPanel5);
        jPanel5.setBounds(230, 10, 760, 210);

        btnHuyLop.setText("Hủy lớp tín chỉ");
        btnHuyLop.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnHuyLopMouseClicked(evt);
            }
        });
        btnHuyLop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHuyLopActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jCheckBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnHuyLop, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(63, 63, 63))
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnHuyLop))
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, 301, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        try {
            if (jCheckBox1.isSelected()) {
                int choice = JOptionPane.showConfirmDialog(this,"Bạn muốn mở lớp đăng kí?",
                "Show Confirm Dialog ", JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE);
                if(choice == 1)
                {
//                    System.out.println("Ban chon NO");
                    jCheckBox1.setSelected(false);
                }
                else
                {
                    int bit = 1;
                    if(ttdkDAO.setTinhTrangDangKi(bit) > 0)
                    {
                        JOptionPane.showMessageDialog(this, "Mở đăng kí thành công");
                    }
                }
            }
            else
            {
                
                int choice = JOptionPane.showConfirmDialog(this,"Bạn muốn đóng lớp đăng kí?",
                "Show Confirm Dialog ", JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE);
                if(choice == 1)
                {
//                    System.out.println("Ban chon NO");
                    jCheckBox1.setSelected(false);
                }
                else
                {
                    int bit = 0;
                    if(ttdkDAO.setTinhTrangDangKi(bit) > 0)
                    {
                        JOptionPane.showMessageDialog(this, "Đóng đăng kí thành công");
                    }
                }     
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private boolean kiemTraDiem(String str) {
        //Kiểm tra điểm nhập vào phải là số >=0 và <= 10
        try {
            // Try parsing the string to double
            double value = Double.parseDouble(str);
//            return value >= 0;
            if(value >= 0 && value <= 10)
            {
                return true;
            }
        } catch (NumberFormatException e) {

            return false;
        }
        return false;
    }

    private void hienThiDanhSachLopTC() throws ClassNotFoundException, SQLException {
        //khởi tạo lại model, xóa hết cột cũ dòng cũ đi
        tableModelLTC = new DefaultTableModel();
        //tạo cột
        taoCotLopTC();

        LopTinChiDAO lopTinChiDAO = new LopTinChiDAO();
        //lấy ra toàn bộ vai trò
        List<LopTinChi> lopTinChiList = lopTinChiDAO.selectAll();
        for (LopTinChi ltc : lopTinChiList) {
            Vector vector = new Vector();
            vector.add(ltc.getMaLopTC());
            vector.add(ltc.getMh().getMaMon());
            vector.add(ltc.getNienKhoa());
            vector.add(ltc.getHocKy());
            vector.add(ltc.getNhom());
            vector.add(ltc.getSlsvMin());
            vector.add(ltc.getSlsvMax());
            //tạo hàng
            tableModelLTC.addRow(vector);
        }
        //đưa dữ liệu từ model vào bảng

        try {
            tab_DanhSachLopTinChi.setModel(tableModelLTC);
        } catch (Exception ex) {
            return;
        }
    }
    private void taoCot() {
        //Tạo cột cho JTable
        tableModel = new DefaultTableModel();
        tableModel.addColumn("Mã lớp TC");
        tableModel.addColumn("Mã SV");
        tableModel.addColumn("Tên SV");
        tableModel.addColumn("Điểm");
    }

    private void taoCotLopTC() {
        //Tạo cột cho JTable danh sách lớp tín chỉ
         tableModelLTC = new DefaultTableModel();
        tableModelLTC.addColumn("Mã lớp");
        tableModelLTC.addColumn("Mã môn");
        tableModelLTC.addColumn("Niên khóa");
        tableModelLTC.addColumn("Học kỳ");
        tableModelLTC.addColumn("Nhóm");
        tableModelLTC.addColumn("Số lượng tối thiểu");
        tableModelLTC.addColumn("Số lượng tối đa");
    }
    private void clearTextControls() {
        txt_Diem.setText("");
        tab_DanhSachDiem.clearSelection();
    }
    
    private void updateControls(LopTinChi ltc) {
        txt_NienKhoa.setText(ltc.getNienKhoa());
        txt_HocKy.setText(String.valueOf(ltc.getHocKy()));
        txt_Nhom.setText(String.valueOf(ltc.getNhom()));
        txt_MaMon.setText(String.valueOf(ltc.getMh().getMaMon()));

    }

    private void hienThiDanhSachDiem(int maLopTC) throws ClassNotFoundException, SQLException {
        //nvởi tạo lại model, xóa hết cột cũ dòng cũ đi
        tableModel = new DefaultTableModel();
        //tạo cột
        taoCot();

        DangKiMonDAO dangKiMonDAO = new DangKiMonDAO();
        //lấy ra toàn bộ vai trò
        List<DangKiMon> dkmList = dangKiMonDAO.selectAll(maLopTC);
        SinhVienDAO svDAO = new SinhVienDAO();
        for (DangKiMon dkm : dkmList) {
            Vector vector = new Vector();
            // Create a SimpleDateFormat object with the desired format
            vector.add(((LopTinChi) cbb_MaLopTC.getSelectedItem()).getMaLopTC());
            vector.add(dkm.getMaSV());
            vector.add(svDAO.getSinhVienByID(dkm.getMaSV()).getTenSV());
            vector.add(dkm.getDiem());
            tableModel.addRow(vector);
        }
        //đưa dữ liệu từ model vào bảng

        try {
            tab_DanhSachDiem.setModel(tableModel);
        } catch (Exception ex) {
            return;
        }
    }
    
    private void loadCombobox_MaLopTinChi() throws ClassNotFoundException, SQLException {
        LopTinChiDAO ltcDAO = new LopTinChiDAO();
        //lấy toàn bộ bảng nhà cung cấp
        List<LopTinChi> ltcList = ltcDAO.selectAll();
        Vector v = new Vector(ltcList);
        //nvởi tạo dữ liệu cho combobox
        DefaultComboBoxModel dcbm = new DefaultComboBoxModel(v);
        cbb_MaLopTC.setModel(dcbm);

        cbb_MaLopTC.setRenderer(new ListCellRenderer() {
            DefaultListCellRenderer dlcr = new DefaultListCellRenderer();

            public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {

                JLabel label = (JLabel) dlcr.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                if (value != null) {
                    label.setText(String.valueOf(((LopTinChi) value).getMaLopTC()));
                }
                return label;
            }
        });

        LopTinChi ltc = (LopTinChi) cbb_MaLopTC.getSelectedItem();
        updateControls(ltc);
        hienThiDanhSachDiem(ltc.getMaLopTC());

    }

    
    private void btnSuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaActionPerformed
        try {

            if (txt_Diem.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Bạn cần nhập đủ thông tin các trường bắt buộc");
                return;
            }
            if (!kiemTraDiem(txt_Diem.getText())) {
                JOptionPane.showMessageDialog(this, "Điểm số không hợp lệ");
                return;
            }
            int row = tab_DanhSachDiem.getSelectedRow();
            if (row < 0) {
                JOptionPane.showMessageDialog(this, "Bạn hãy chọn một sinh viên trong danh sách để nhập điểm");
                return;
            }
            DangKiMonDAO dangKiMonDAO = new DangKiMonDAO();
            LopTinChi ltc = (LopTinChi) cbb_MaLopTC.getSelectedItem();
            int maLopTC = ltc.getMaLopTC();
            //Lấy thông tin sinh viên được click
            String maSV = tab_DanhSachDiem.getValueAt(row, 1).toString();
            DangKiMon dkm = dangKiMonDAO.getDkmByID(maLopTC, maSV);
            dkm.setMaLopTC(maLopTC);
            if (Double.parseDouble(txt_Diem.getText()) <= dkm.getDiem()) {
                JOptionPane.showMessageDialog(this, "Điểm mới phải lớn hơn so với điểm đã nhập trước đó");
                return;
            }

            dkm.setDiem(Float.parseFloat((txt_Diem.getText())));
            //thực hiện thêm vào DB
            dangKiMonDAO.update(dkm);
            //load lại dữ liệu lên lưới
            hienThiDanhSachDiem(maLopTC);
            //nếu thành công thì thông báo
            JOptionPane.showMessageDialog(this, "Đã cập nhật thông tin!");
        } catch (Exception ex) {

        }
    }//GEN-LAST:event_btnSuaActionPerformed

    private void cbb_MaLopTCItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbb_MaLopTCItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_cbb_MaLopTCItemStateChanged

    
    private void cbb_MaLopTCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbb_MaLopTCActionPerformed

        try {
            JComboBox comboBox = (JComboBox) evt.getSource();
            LopTinChi ltc = (LopTinChi) comboBox.getSelectedItem();
            updateControls(ltc);
            clearTextControls();
            hienThiDanhSachDiem(ltc.getMaLopTC());
        } catch (Exception ex) {

        }
    }//GEN-LAST:event_cbb_MaLopTCActionPerformed

    private void tab_DanhSachDiemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tab_DanhSachDiemMouseClicked

    }//GEN-LAST:event_tab_DanhSachDiemMouseClicked

    private void btnHuyLopMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnHuyLopMouseClicked
        // TODO add your handling code here:
        
        
        
    }//GEN-LAST:event_btnHuyLopMouseClicked

    private void btnHuyLopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHuyLopActionPerformed
        // TODO add your handling code here:
        HuyLopTCFrame huyLop = new HuyLopTCFrame();
        huyLop.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE); 
        huyLop.setLocationRelativeTo(this);
        huyLop.setVisible(true);
    }//GEN-LAST:event_btnHuyLopActionPerformed

    private void txt_DiemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_DiemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_DiemActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnHuyLop;
    private javax.swing.JButton btnSua;
    private javax.swing.JComboBox cbb_MaLopTC;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblTenSV;
    private javax.swing.JTable tab_DanhSachDiem;
    private javax.swing.JTable tab_DanhSachLopTinChi;
    private javax.swing.JTextField txt_Diem;
    private javax.swing.JTextField txt_HocKy;
    private javax.swing.JTextField txt_MaMon;
    private javax.swing.JTextField txt_Nhom;
    private javax.swing.JTextField txt_NienKhoa;
    // End of variables declaration//GEN-END:variables
}
